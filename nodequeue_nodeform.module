<?php
/**
 * @file
 *   Nodequeue Node Form module
 *
 * @author
 *   Lucian NEAG (Luxian)
 */


/**
 * Implementation of hook_form_BASE_FORM_ID_alter().
 */
function nodequeue_nodeform_form_node_form_alter(&$form, &$form_state) {
  $node = clone($form['#node']);

  // If we do not provide an nid here, we will get some php warnings. So in case
  // we are on the add form, where we do not have a node id, we just set it to
  // 0. And we do this on the clone of the node, so the node itself in the form
  // will not be affected. In the _nodequeue_nodeform_node_save() we will use
  // the correct node id.
  if (!isset($node->nid)) {
    $node->nid = 0;
  }

  $queues = nodequeue_load_queues_by_type($node->type, 'tab');
  if (!$queues) {
    // No queues to display.
    return;
  }

  $subqueues = nodequeue_get_subqueues_by_node($queues, $node);

  // Add a new vertical panel in Additional Settings section.
  $form['nodequeue']['#type'] = 'fieldset';
  $form['nodequeue']['#title'] = t('Nodequeue');
  $form['nodequeue']['#group'] = 'additional_settings';
  $form['nodequeue']['#tree'] = TRUE;

  // Save an array with all the queues.
  $form['nodequeue']['queues']['#type'] = 'value';

  foreach ($subqueues as $subqueue) {
    $queue = $queues[$subqueue->qid];

    // Check permissions.
    if (!nodequeue_node_and_queue_access($node, $queue, $subqueue)) {
      continue;
    }

    // In case of node translations, we have to use the correct node id
    // depending on the queue settings. The nodequeue_get_content_id() will
    // return us either the node id or the translation id, so we use this
    // instead of the $node->nid.
    $nid = nodequeue_get_content_id($queue, $node);
    $subqueue = array($subqueue->sqid => $subqueue);
    nodequeue_set_subqueue_positions($subqueue, $nid);
    $subqueue = array_shift($subqueue);

    $title = nodequeue_title_substitute($queue->subqueue_title, $queue, $subqueue);
    $key = "nq_{$queue->qid}_{$subqueue->sqid}_" . $nid;
    $checked = !empty($subqueue->position);

    $form['nodequeue'][$key]['#type'] = 'checkbox';
    $form['nodequeue'][$key]['#title'] = $title;
    $form['nodequeue'][$key]['#default_value'] = (int)$checked;

    // Save the value (easy for processing).
    $form['nodequeue']['queues']['#value'][$key] = array(
      'qid' => $queue->qid,
      'sqid' => $subqueue->sqid,
      'nid' => $nid,
      'op' => $checked ? 'remove' : 'add',
    );
  }
}

/**
 * Implementation of hook_node_insert().
 */
function nodequeue_nodeform_node_insert($node) {
  _nodequeue_nodeform_node_save($node);
}

/**
 * Implementation of hook_node_update().
 */
function nodequeue_nodeform_node_update($node) {
  _nodequeue_nodeform_node_save($node);
}

/**
 * Save submitted form data from 'node_form' during
 * node_save() operation.
 */
function _nodequeue_nodeform_node_save($node) {
  if (empty($node->nodequeue['queues'])) {
    return; // nothing to do
  }

  foreach($node->nodequeue['queues'] as $key => $info) {
    if (isset($node->nodequeue[$key])) {
      $old_value = $info['op'] == 'remove' ? 1 : 0;
      $changed = $old_value != $node->nodequeue[$key];

      if ($changed) {
        $queue = nodequeue_load($info['qid']);
        $subqueue = subqueue_load($info['sqid']);
        $id = empty($info['nid']) ? nodequeue_get_content_id($queue, $node) : $info['nid'];

        switch($info['op']) {
          case 'add':
            nodequeue_subqueue_add($queue, $subqueue, $id);
            break;

          case 'remove':
            nodequeue_subqueue_remove_node($subqueue->sqid, $id);
            break;
        }
      }
    }
  }
}
